#This is self hosted Cluster setup

#Script-01 (Apply on both master and slave)
--->
sudo apt-get update
sudo apt install apt-transport-https curl -y
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update -y
sudo apt-get install containerd.io -y
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
--->

#after running first script open this file and made chanegs (on Both master and slave)
sudo vim /etc/containerd/config.toml

#made chnages (on Both master and slave)
SystemdCgroup = true

#Restart containerd (on Both master and slave)
sudo systemctl restart containerd


#Script-02 (Apply on both master and slave)
--->
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl enable --now kubelet
--->

#Disable Swap (on Both master and slave)
sudo swapoff -a

#Check the swap it should be 0
free -h

#if there are still swap on [commnet out the last swap] (on Both master and slave)
sudo vim /etc/fstab 

#Enabel kernel modules (on Both master and slave)
sudo modprobe br_netfilter

#Apply setting in sysctl (on Both master and slave)
sudo sysctl -w net.ipv4.ip_forward=1

#Master only
sudo kubeadm init --pod-network-cidr=10.244.0.0/16  [at the end of this command result there will be the kubeadm token which help slave machine to join the cluster]

#Master only Run one by one 
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
kubectl get pods --all-namespaces

#Slave only [apply your token on the slave machine]
kubeadm join 10.0.0.6:6443 --token 92v88z.22t0ypwhkly8ipc7 --discovery-token-ca-cert-hash sha256:913e4bbdb7a46c00532e02e9024a82db57f77cbc3c8b5b040

#To verify the cluster
kubeclt get nodes


#for kubeaduit [this will audit the cluster and scan if for the differnet kinf of vulnerability]
https://github.com/shopify/kubeaudit/releases --visit this copy link address as per your need 

#In master to apply kubeaudit
wget https://github.com/Shopify/kubeaudit/releases/download/v0.22.2/kubeaudit_0.22.2_linux_amd64.tar.gz
tar -xvf kubeaudit_0.22.2_linux_amd64.tar.gz
sudo mv kubeaudit /usr/local/bin/
kubeaudit all


#If you face br_netfilter issue [master slave connectivity issue]

#Run the following on both master and worker nodes:
sudo modprobe br_netfilter
echo 'br_netfilter' | sudo tee /etc/modules-load.d/br_netfilter.conf

#Now enable the bridge network filtering [run this as a command]
sudo tee /etc/sysctl.d/k8s.conf <<EOF
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
net.ipv4.ip_forward=1
EOF

sudo sysctl --system

#If will start working to verify
kubectl get pods -n kube-system -l app=flannel -o wide
kubectl get pods -n kube-flannel -o wide
